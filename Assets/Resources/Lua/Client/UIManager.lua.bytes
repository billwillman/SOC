require("Client.Views.UIConfig")

-- UI管理器
local UIManager = _MOE.class("UIManager")
local BaseResLoaderAsyncType = typeof(CS.NSLib.ResMgr.BaseResLoaderAsyncMono)
local UIBinderType = typeof(CS.SOC.GamePlay.UIBinder)
local UILayerClass = require("Client.UILayer")

function UIManager:Ctor()
    self.Wnds = {}
    -- 创建层
    self:_CreateLayers()
end

function UIManager:_CreateLayers()
    self.Layers = {}
    if UILayerClass.Type then
        for _, layerId in pairs(UILayerClass.Type) do
            if layerId then
                self.Layers[layerId] = UILayerClass.New(layerId, mgr)
            end
        end
    end
    self.RemoveLayerTransform = _MOE.GameStartTransform:Find("UI Root/RemoveLayer")
end

function UIManager:_GetWindowConfig(wndName)
    if not wndName or not _MOE.WindowConfig then
        return
    end
    local ret = _MOE.WindowConfig[wndName]
    return ret
end

function UIManager:_CreateUIPrefab(wndName)
    if not wndName then
        return
    end
    local cfg = self:_GetWindowConfig(wndName)
    if not cfg then
        return
    end
    local path = cfg.resPath
    if not path then
        return
    end
    path = string.format("Resources/UI/%s.prefab", path)
    local ret = _MOE.ResourceManager:CreateGameObject(path)
    local loader = nil
    if ret then
        loader = ret:AddComponent(BaseResLoaderAsyncType)
    end
    return ret, loader
end

function UIManager:GetWindowView(wndName)
    if not wndName then
        return
    end
    local view = self.Wnds[wndName]
    return view
end

function UIManager:_AppendLayerToLayer(wndName, layerId)
    if not wndName or not layerId then
        return
    end
    local layer = self.Layers[layerId]
    if not layer then
        return
    end
    return layer:_AppendWindow(wndName)
end

function UIManager:_AppendWndToLayerFromCfg(wndName)
    local cfg = self:GetWindowView(wndName)
    if not cfg then
        return
    end
    return self:_AppendLayerToLayer(wndName, cfg.layerId)
end

function UIManager:_AppendWndToRemoveLayer(wndName)
    if not wndName then
        return
    end
    local view = self:GetWindowView(wndName)
    if not view then
        return
    end
    self:_RemoveWndToLayer(wndName)
    if view.RootTransform and self.RemoveLayerTransform then
        view.RootTransform:SetParent(self.RemoveLayerTransform, false)
    end
end

function UIManager:_RemoveWndToLayer(wndName)
    local view = self:GetWindowView(wndName)
    if not view then
        return
    end
    local layerId = view:GetLayerId()
    if not layerId then
        return
    end
    local layer = self.Layers[layerId]
    if not layer then
        return
    end
    local ret = layer:_RemoveWindow(wndName)
    return ret
end

function UIManager:_CreateUIWindow(wndName, ...)
    if not wndName then
        return
    end
    local config = self:_GetWindowConfig(wndName)
    if not config or not config.class or string.len(config.class) <= 0 then
        return
    end
    local viewClass = require(config.class)
    if not viewClass then
        return
    end
    local gameObj, loader = self:_CreateUIPrefab(wndName)
    if not gameObj then
        return
    end
    local view = viewClass.New(gameObj)
    if view then
        view.Loader = loader -- 设置加载器
        local UIBinder = gameObj:GetComponent(UIBinderType)
        if UIBinder then
            UIBinder:InitRegisterControls(view)
        end
        self.Wnds[wndName] = view
        self:_AppendWndToLayerFromCfg(wndName)
        view:Open(...)
    end
    return view
end

function UIManager:ChangeWindowToRemoveLayer(wndName)
    return self:ChangeWndowLayer(wndName, UILayerClass.Type.RemoveLayer)
end

-- 打开界面
function UIManager:OpenWindow(wndName, ...)
    if not wndName then
        return
    end
    local view = self:GetWindowView(wndName)
    if view then
        view:ReOpen(...)
        return view
    end
    view = self:_CreateUIWindow(wndName, ...)
    return view
end

function UIManager:_FreeWindow(wndName)
    if not wndName then
        return
    end
    local view = self.Wnds[wndName]
    if view then
        local gameObj = view.RootGameObject
        view:Destroy()
        self:_AppendWndToRemoveLayer(wndName)
        self.Wnds[wndName] = nil
        -- 删除GameObject
        if gameObj then
            _MOE.GameObject.Destroy(gameObj)
        end
    end
end

function UIManager:CloseWindow(wndName)
    if not wndName then
        return
    end
    local view = self.Wnds[wndName]
    if view then
        view:Close()
        ---- 释放流程
        self:_FreeWindow(wndName)
    end
end

return UIManager