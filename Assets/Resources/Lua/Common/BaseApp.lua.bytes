local BaseApp = _MOE.class("BaseApp")

function BaseApp:Init()
    xpcall(self.OnInit, _G.ErrorHandler, self)
end

function BaseApp:Quit()
    xpcall(self.OnQuit, _G.ErrorHandler, self)
    self:UnRegisterModels()
end

function BaseApp:GetModel(modelName)
    if not modelName or not self.Models then
        return
    end
    local ret = self.Models[modelName]
    return ret
end

function BaseApp:RegisterModel(modelFilePath, ...)
    if not modelFilePath then
        return
    end
    local modelClass = require(modelFilePath)
    if not modelClass or not modelClass.__cname then
        return
    end
    local modelName = modelClass.__cname
    local ret = self:GetModel(modelName)
    if ret then
        return ret
    end
    ret = modelClass.New(...)
    self.Models = self.Models or {}
    self.Models[modelName] = ret
    -- 初始化
    if ret and ret.Init then
        ret:Init()
    end
    return ret
end

function BaseApp:UnRegisterModel(modelName)
    local model = self:GetModel(modelName)
    if model then
        if model.UnInit then
            model:UnInit()
        end
        self.Models[modelName] = nil
    end
end

function BaseApp:UnRegisterModels()
    if not self.Models or next(self.Models) == nil then
        return
    end
    for _, model in pairs(self.Models) do
        if model and model.UnInit then
            model:UnInit()
        end
    end
    self.Models = {}
end

------------------------------------------------------ 虚方法 ---------------------------------------------------
function BaseApp:OnInit()
end

function BaseApp:OnQuit()
end

return BaseApp