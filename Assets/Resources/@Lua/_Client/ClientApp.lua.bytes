local BaseAppClass = require("_Common.BaseApp")
require("_Client.ClientEvents")

if _MOE.IsUseFairyGUI and _MOE.FairyGUIResLoaderAsyncMono and _MOE.FairyGUIResLoaderAsyncMono.InitFairyGUI then
    _MOE.FairyGUIResLoaderAsyncMono.InitFairyGUI()
    _MOE.FairyGUI_GRoot = CS.FairyGUI.GRoot.inst
    if _MOE.FairyGUI_GRoot then
        _MOE.FairyGUI_GRoot:SetContentScaleFactor(1280, 720, CS.FairyGUI.UIContentScaler.ScreenMatchMode.MatchWidthOrHeight);
    end
end

local ClientApp = _MOE.class("ClientApp", BaseAppClass)

local function CreateUIRoot()
    local root = _MOE.ResourceManager:CreateGameObject("Resources/UI/UI Root.prefab")
    if root then
        root.name = "UI Root"
        root.transform:SetParent(_MOE.GameStartTransform, false)
    end
end

local function CreateMyPlayerInput()
    local playerInput = _MOE.ResourceManager:CreateGameObject("Resources/@Input/PlayerInput.prefab")
    if playerInput then
        playerInput.name = "PlayerInput"
        playerInput.transform:SetParent(_MOE.GameStartTransform, false)
    end
end

function ClientApp:OnInit()
    CreateUIRoot()
    _MOE.BaseViewClass = require("_Common.BaseView")
    self:RegisterModel("TimerManager", "_Common.TimerManager", false)
    self.TimerManager = self:GetModel("TimerManager")
    _MOE.TimerManager = self.TimerManager
    _MOE.UIManager = require("_Client.UIManager").New()
    self:RegisterModel("NetClientModel", "_Client.Models.NetClientModel")
    self:RegisterModel("LoginModel", "_Client.Models.LoginModel", false)
    self:RegisterModel("GMClientModel", "_Client.Models.GMModel", true) -- 这个是Lazy模块
    self:RegisterModel("GMCommand", "_Client.Models.GMCommandModel", true) -- 这个是Lazy模块
    self:RegisterModel("MySelfInfo", "_Client.Models.MySelfModel", false)
    self:RegisterModel("MultiGame", "_Client.Models.MultiGameModel", false)
    self:RegisterModel("SingleGame", "_Client.Models.SingleGameModel", false)

    CreateMyPlayerInput()
end

function ClientApp:SendLoginSrvMsg(msgId, msg)
    local model = self:GetModel("NetClientModel")
    if model then
        return model:SendMsg(msgId, msg)
    end
    return false
end

function ClientApp:SendGMSrvMsg(msgId, msg)
    local model = self:GetModel("GMClientModel")
    if model then
        return model:SendMsg(msgId, msg)
    end
    return false
end

function ClientApp:GetMySelf()
    local ret = self:GetModel("MySelfInfo")
    return ret
end

function ClientApp:UseGMCommand(command, ...)
    if not command then
        return false
    end
    local model = self:GetModel("GMCommand")
    if not model then
        return false
    end
    return model:UseCommand(command, ...)
end

function ClientApp:UseGM(command, paramStr)
    if not command then
        return false
    end
    local GMModel = self:GetModel("GMClientModel")
    if not GMModel then
        return false
    end
    return GMModel:SendGM(command, paramStr)
end

function ClientApp:OnQuit()
    self:DestroyDSNetManagerPrefab()
    _MOE.UIManager:FreeAllWindow()
    _MOE.NetManager:Disconnect()
end

function ClientApp:OnUpdate(deltaTime)
    if self.TimerManager and self.TimerManager.OnUpdate then
        self.TimerManager:OnUpdate(deltaTime)
    end
end

function ClientApp:GetMySelfTokenAndSession()
    local mySelf = self:GetMySelf()
    if not mySelf or not mySelf.ServerData then
        return
    end
    return mySelf.ServerData.token, mySelf.ServerData.session
end

function ClientApp:RegisterLoginSrvMsgCallBack(msgId, obj, func)
    if not func then
        return false
    end
    local model = self:GetModel("NetClientModel")
    if model then
        model:RegisterReceiveMsgProcess(msgId,
            function (netModel, msg)
                func(obj, netModel, msg)
            end
        )
        return true
    end
    return false
end

function ClientApp:UnRegisterLoginSrvMsgCallBack(msgId)
    local model = self:GetModel("NetClientModel")
    if model then
        model:UnRegisterReceiveMsgProcess(msgId)
        return true
    end
    return false
end

function ClientApp:GetMultiGame()
    local ret = self:GetModel("MultiGame")
    return ret
end

function ClientApp:GetSingleGame()
    local ret = self:GetModel("SingleGame")
    return ret
end

function ClientApp:GetMultiGameIpAndPort()
    local model = self:GetMultiGame()
    if not model then
        return
    end
    local data = model:GetData()
    if not data then
        return
    end
    return data.ip, data.port
end

----------------------------------------------------- DS链接对象 -----------------------------
function ClientApp:CreateDSNetManagerPrefab()
    if self.DSNetManagerPrefab then
        return
    end
    local gameObj = _MOE.ResourceManager:CreateGameObject("Resources/@Net/MutiManager.prefab")
    if gameObj then
        -- gameObj.transform:SetParent(_MOE.GameStartTransform, false)
        gameObj.name = "MutiManager"
    end
    self.DSNetManagerPrefab = gameObj
end

function ClientApp:DestroyDSNetManagerPrefab()
    if not self.DSNetManagerPrefab then
        return
    end
    _MOE.ObjetDestroy(self.DSNetManagerPrefab)
    self.DSNetManagerPrefab = nil
end

return ClientApp