-- 网络客户端Model
local NetClientModel = _MOE.class("NetClientModel", _MOE.BaseModel)

--- 请求服务器列表
function NetClientModel:OnInit()
    _MOE.Logger.Log("[NetClientModel] OnInit...")
    local jsonStr = _MOE.ResourceManager:LoadText("Resources/@Config/Server.json")
    self.HttpServerList =_MOE.Json.decode(jsonStr)
    self.HttpServerListClient = nil
    self:RegsterCSharpEvent(_MOE.NetManager, "OnConnectResult", self._OnGSConnectResult)
    self:RegsterCSharpEvent(_MOE.NetManager, "OnSocketAbort", self._OnGSSocketAbort)
end

local function DisposeHttpServerClient(self)
    if self.HttpServerListClient then
        self.HttpServerListClient:Dispose()
        self.HttpServerListClient = nil
    end
end

function NetClientModel:_OnGSConnectResult(isOk)
    if isOk then
        _MOE.Logger.LogFormat("[NetClientModel] GSConnnectResult: {0}", isOk)
    else
        _MOE.Logger.LogErrorFormat("[NetClientModel] GSConnnectResult: {0}", isOk)
    end
end

function NetClientModel:_OnGSSocketAbort()
end

function NetClientModel:UnInit()
    DisposeHttpServerClient(self)
    _MOE.NetManager:Disconnect()
    _MOE.NetManager.OnConnectResult = nil
    _MOE.NetManager.OnSocketAbort = nil
end

function NetClientModel:GetHttpServerList()
    return self.HttpServerList
end

-- 连接GS服务器
function NetClientModel:ConnectGSServer()
    _MOE.NetManager:ConnectServer("127.0.0.1", 5000, true)
end

function NetClientModel:GetServerList()
    return self.ServerList
end

-- 请求Http的GS服务器信息
function NetClientModel:ReqHttpServerListData(selectIdx)
    if not self.HttpServerList then
        return false
    end
    selectIdx = selectIdx or 1
    local httpData = self.HttpServerList[selectIdx]
    if not httpData then
        return false
    end
    DisposeHttpServerClient(self)
    local txtRep = _MOE.HttpStrResponse()
    local url = httpData.url
    if url[string.len(url)] ~= "/" then
        url = url .. "/"
    end
    url = url .. "serverlist"
    self.HttpServerListClient = _MOE.HttpHelper.OpenUrl(url, txtRep, function (client, status)
        if self.HttpServerListClient == client then
            if status == _MOE.HttpListenerStatus.hsDone then
                self.HttpServerListClient = nil
                -- 完成了
                print(txtRep.Txt)
                self.ServerList = _MOE.Json.decode(txtRep.Txt)
                _MOE.EventManager:DispatchEvent(_MOE.ClientEvents.Client_RepServerList, self.ServerList)
            elseif status == _MOE.HttpListenerStatus.hsError then
                self.HttpServerListClient = nil
                -- 失败
            end
        end
    end)
    return self.HttpServerListClient ~= nil
end

return NetClientModel