-- 网络客户端Model
local baseNetModel = require("_Common.BaseNetModel")
local NetClientModel = _MOE.class("NetClientModel", baseNetModel)
local MsgIds = require("_NetMsg.MsgId")

local function DisposeHttpServerClient(self)
    if self.HttpServerListClient then
        self.HttpServerListClient:Dispose()
        self.HttpServerListClient = nil
    end
end

--- 请求服务器列表
function NetClientModel:NetModel_OnInit()
    _MOE.Logger.Log("[NetClientModel] OnInit...")
    local jsonStr = _MOE.ResourceManager:LoadText("Resources/@Config/Server.json")
    self.HttpServerList =_MOE.Json.decode(jsonStr)
    self.HttpServerListClient = nil
end

function NetClientModel:NetModel_OnUnInit()
    DisposeHttpServerClient(self)
end

function NetClientModel:GetHttpServerList()
    return self.HttpServerList
end

-- 连接GS服务器
function NetClientModel:ConnectGSServer()
    local gsData = self:GetSelectGsData()
    if not gsData then
        return
    end
    self:ConnectServer(gsData.ip, gsData.port)
end

function NetClientModel:GetServerList()
    return self.ServerList
end

function NetClientModel:GetSelectServerIndex()
    return self.SelectServerIndex
end

function NetClientModel:GetSelectGsData()
    if not self.ServerList then
        return
    end
    local selIndex = self:GetSelectServerIndex()
    if not selIndex then
        return
    end
    local ret = self.ServerList[selIndex]
    return ret
end

-- 请求Http的GS服务器信息
function NetClientModel:ReqHttpServerListData(selectIdx)
    if not self.HttpServerList then
        return false
    end
    selectIdx = selectIdx or 1
    local httpData = self.HttpServerList[selectIdx]
    if not httpData then
        return false
    end
    DisposeHttpServerClient(self)
    local txtRep = _MOE.HttpStrResponse()
    local url = httpData.url
    if url[string.len(url)] ~= "/" then
        url = url .. "/"
    end
    url = url .. "serverlist"
    self.HttpServerListClient = _MOE.HttpHelper.OpenUrl(url, txtRep, function (client, status)
        if self.HttpServerListClient == client then
            if status == _MOE.HttpListenerStatus.hsDone then
                self.HttpServerListClient = nil
                -- 完成了
                print(txtRep.Txt)
                self.ServerList = _MOE.Json.decode(txtRep.Txt)
                self.SelectServerIndex = 1
                _MOE.EventManager:DispatchEvent(_MOE.ClientEvents.Client_RepServerList, self.ServerList)
            elseif status == _MOE.HttpListenerStatus.hsError then
                self.HttpServerListClient = nil
                _MOE.Logger.LogError("[ReqHttpServerListData] Error")
            end
        end
    end)
    return self.HttpServerListClient ~= nil
end

-- 请求游戏地图，游戏类型
function NetClientModel:ReqDsAddr(mapId, gameType)
end

-- 连接Ds服务器
function NetClientModel:ConnectDsAddr(dsAddr)
end

function NetClientModel:GetGMAddr()
    local data = self:GetSelectGsData()
    if data then
        return data.GM
    end
end

return NetClientModel