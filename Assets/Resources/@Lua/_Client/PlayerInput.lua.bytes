local PlayerInput = _MOE.class("PlayerInput", _MOE.CSharpEventContainer)

function PlayerInput:Ctor(target, binder)
    _MOE.Logger.Log("[PlayerInput] PlayerInput Create")
    self.PlayerInput = target
    self.Binder = binder

    local EventType = CS.SOC.GamePlay.LuaEvent_MonoEventType
    _MOE.Logger.Log(EventType.Awake)
    self.Binder:RegisterLuaEvent(EventType.Awake, self.OnAwake)
    self.Binder:RegisterLuaEvent(EventType.Destroyed, self.OnDestroy)
end

function PlayerInput:InitEvents()
    local asset = self.PlayerInput.actions
    if asset then
        local PlayerMode = asset:FindActionMap("Player", true)
        if PlayerMode then
            local MoveAction = PlayerMode:FindAction("Move", true)
            if MoveAction then -- w,a,s,d
                self:RegsterCSharpEvent(MoveAction, "started", self.OnMoveAction)
                self:RegsterCSharpEvent(MoveAction, "canceled", self.OnCanceled)
                self:RegsterCSharpEvent(MoveAction, "performed", self.OnPerformed)
            end
        end
    end
end

function PlayerInput:OnPerformed()
    _MOE.Logger.Log("OnPerformed")
end

function PlayerInput:OnCanceled()
    _MOE.Logger.Log("OnCanceled")
end

function PlayerInput:OnMoveAction()
    _MOE.Logger.Log("OnMoveAction")
end

function PlayerInput:OnAwake()
    self:InitEvents()
end

function PlayerInput:OnDestroy()
    self:UnRegsterAllCsharpEvents()
end

return PlayerInput