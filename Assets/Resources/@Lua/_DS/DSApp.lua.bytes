local BaseAppClass = require("_Common.BaseApp")

local DSApp = _MOE.class("DSApp", BaseAppClass)
local DsGsSessionClass = require("_DS.DsGsSession")
require("_DS.ServerEvents")

local function CreateNetworkManager()
    local gameObj = _MOE.ResourceManager:CreateGameObject("Resources/@Net/MutiManager.prefab")
    if gameObj then
        -- gameObj.transform:SetParent(_MOE.GameStartTransform, false)
        gameObj.name = "MutiManager"
    end
end

local function ParseStartupCommands(self)
    local tb
    if _MOE.IsEditor then
        local json = "{'playerInfos':[{'token':'7b604add895a37e1296756f9b8c7b2b2','session':'1fbabfb6abd657df321587792bdb8577'}],'dsaData':{'ip':'127.0.0.1','port':1991},'battleData':{'ip':'127.0.0.1','port':1990}}"
        json = string.gsub(json, "'", "\"")
        tb = _MOE.Json.decode(json)
    end
    if not _MOE.IsEditor then
        local commandLineArgs = CS.System.Environment.GetCommandLineArgs()
        if not commandLineArgs then
            return false
        end
        local commandArgsType = type(commandLineArgs)
        if commandArgsType == "userdata" then
            if commandLineArgs.Length >= 2 then
                local json = commandLineArgs[1]
                xpcall(
                    function ()
                        tb = _MOE.Json.decode(json)
                    end, function (err)
                        tb = nil
                        _G.ErrorHandler(err)
                    end
                )
            end
        else
            _MOE.Logger.LogError("[DS] commandLineArgs type error: " .. commandArgsType)
        end
    end
    if tb then
        self.GsDsSession = DsGsSessionClass.New(tb)
        return true
    end
    return false
end

function DSApp:GetGsDsSession()
    return self.GsDsSession
end

function DSApp:OnInit()
    self:RegisterModel("TimerManager", "_Common.TimerManager", false)
    self.TimerManager = self:GetModel("TimerManager")
    _MOE.TimerManager = self.TimerManager
    if not ParseStartupCommands(self) then
        _MOE.Logger.LogError("[DSApp] ParseStartupCommands: Error~!")
        self:QuitGame() -- 杀掉进程
        return
    end
    self:RegisterModel("DsGsNetModel", "_DS.Models.DsGsNetModel", true)
    self:RegisterModel("DsSessionManager", "_DS.Models.DsSessionManager", true)
    self:RegisterModel("DsaNetModel", "_DS.Models.DsaNetModel", true)
    -- 创建网络NetworkManager
    CreateNetworkManager()
end

function DSApp:OnQuit()
    self.GsDsSession = nil
end

function DSApp:OnUpdate(deltaTime)
    if self.TimerManager and self.TimerManager.OnUpdate then
        self.TimerManager:OnUpdate(deltaTime)
    end
end

function DSApp:QuitGame(...)
    return _MOE.Application.Quit(...)
end

return DSApp