local BaseAppClass = require("_Common.BaseApp")
require("_DS.Events")

local DSApp = _MOE.class("DSApp", BaseAppClass)
local DsGsSessionClass = require("_DS.DsGsSession")

local function CreateNetworkManager()
    local gameObj = _MOE.ResourceManager:CreateGameObject("Resources/@Net/MutiManager.prefab")
    if gameObj then
        -- gameObj.transform:SetParent(_MOE.GameStartTransform, false)
        gameObj.name = "MutiManager"
    end
end

local function ParseStartupCommands(self)
    local tb = nil
    if _MOE.IsEditor then
        -- 编辑器模式，直接读配置
        tb = {
            GsIp = "127.0.0.1",
            GsPort = 1990,
            GsSession = "LocalHost_DS_Session", -- 本机Session
            DsPort = 50000
        }
    else
        local commandLineArgs = CS.System.Environment.GetCommandLineArgs()
        if not commandLineArgs then
            return false
        end
        for _, p in ipairs(commandLineArgs) do
            if p then
                -- 处理启动参数
            end
        end
    end
    if tb then
        self.GsDsSession = DsGsSessionClass.New(tb)
    end
    return true
end

function DSApp:GetGsDsSession()
    return self.GsDsSession
end

function DSApp:OnInit()
    self:RegisterModel("TimerManager", "_Common.TimerManager", false)
    self.TimerManager = self:GetModel("TimerManager")
    _MOE.TimerManager = self.TimerManager
    if not ParseStartupCommands(self) then
        _MOE.Logger.LogError("[DSApp] ParseStartupCommands: Error~!")
        self:KillProcess() -- 杀掉进程
        return
    end
    self:RegisterModel("DsGsNetModel", "_DS.Models.DsGsNetModel", true)
    self:RegisterModel("DsSessionManager", "_DS.Models.DsSessionManager", true)
    -- 创建网络NetworkManager
    CreateNetworkManager()
end

function DSApp:OnQuit()
    self.GsDsSession = nil
end

function DSApp:OnUpdate(deltaTime)
    if self.TimerManager and self.TimerManager.OnUpdate then
        self.TimerManager:OnUpdate(deltaTime)
    end
end

function DSApp:QuitGame(...)
    return _MOE.Application.Quit(...)
end

return DSApp