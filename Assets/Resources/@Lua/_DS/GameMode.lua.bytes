local CSharpEventContainer = require("_Common.CSharpEventContainer")
local GameMode = _MOE.class("GameMode", CSharpEventContainer)

function GameMode:Ctor(netWorkMgr, binder)
    self.NetWorkMgr = netWorkMgr
    self.Binder = binder
    self:RegisterSystemEvents()

    -- 设置GameMode数据
    _MOE.GameApp.GameMode = self
end

function GameMode:OnDestroy()
    if self.Transport and self.Transport.Shutdown then
        self.Transport:Shutdown()
    end
    _MOE.EventManager:UnRegisterEvents(self)
    if _MOE.DsNetworkHelper and _MOE.DsNetworkHelper.NetworkManager_ClearAllEvents then
        _MOE.DsNetworkHelper.NetworkManager_ClearAllEvents()
    end
    self:UnRegsterAllCsharpEvents()
    _MOE.NetCodeHelper.UnInitHelper()
    self.Transport = nil

    self.NetWorkMgr = nil
    self.Binder = nil
end

if _MOE.IsDS then
    ----------------------------- 只有DS上才跑这个逻辑
    local MutiScenes = {
        "Test"
    }

    function GameMode:RegisterSystemEvents()
        local EventType = _MOE.LuaEvent_MonoEventType
        self.Binder:RegisterLuaEvent(EventType.Awake:GetHashCode(), self.OnAwake)
        self.Binder:RegisterLuaEvent(EventType.Destroyed:GetHashCode(), self.OnDestroy)
        self.Binder:RegisterLuaEvent(EventType.Start:GetHashCode(), self.OnStart)
        --_MOE.EventManager:RegisterEvent(_MOE.CommonEvents.GsConnectResult, self, self.OnGsConnectResult)
        -- _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.GsConnectAbort, self, self.OnGsConnectAbort)
        _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.DsaConnectResult, self, self.OnGsConnectResult)
        _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.DsaConnectAbort, self, self.OnGsConnectAbort)
    end

    function GameMode:RegisterNetManagerServerEvents()
        self:RegsterCSharpEvent(self.NetWorkMgr, "ConnectionApprovalCallback", self.OnServer_ConnectionApprovalCallback)
        -- self:RegsterCSharpEvent(self.NetWorkMgr, "OnClientConnectedCallback", self.OnServer_ClientConnectedCallback)
        local ConnectionManager = self.NetWorkMgr.ConnectionManager
        self:RegsterCSharpEvent(ConnectionManager, "OnClientDisconnectCallback", self.OnServer_ClientDisconnectCallback)

        local loader = _MOE.GameApp:GetSceneAsyncLoader()
        if loader ~= nil then
            self:RegsterCSharpEvent(loader, "onSceneLoaded", self.OnServer_OnMainSceneABLoad)
        end
    end

    function GameMode:OnServer_OnMainSceneABLoad(sceneName, loadTag)
        if not sceneName or loadTag ~= "onlyAB" then
            return
        end

        local ret = self.SceneManager:LoadScene(scenePath, _MOE.LoadSceneMode.Single)
        _MOE.Logger.LogFormat("[GameMode] LoadSceneAsync: {0} status {1:D}", scenePath, ret)
        return ret == _MOE.SceneEventProgressStatus.Started
    end

    function GameMode:OnServer_ClientDisconnectCallback(clientId)
        self:RemoveSessionPlayer(clientId)
    end

    function GameMode:AddSessionPlayer(clientId, loginToken)
        if not clientId or not loginToken then
            return false
        end
        self.SessionPlayers = self.SessionPlayers or {}
        self.SessionPlayers[clientId] = loginToken
        return true
    end

    function GameMode:RemoveSessionPlayer(clientId)
        if not clientId or not self.SessionPlayers then
            return
        end
        self.SessionPlayers[clientId] = nil
    end

    function GameMode:OnServer_ConnectionApprovalCallback(request, response)
        _MOE.Logger.LogFormat("[GameMode] ConnectionApprovalCallback Payload: {0}", request.Payload)
        local Payload = nil
        xpcall(function (PayloadStr)
            Payload = _MOE.Json.decode(PayloadStr)
        end, _G.ErrorHandler, request.Payload)
        if not Payload then
            response.Approved = false
            _MOE.Logger.LogError("[GameMode] Payload is not vaild")
            return
        end
        -- 判断dsToken是否一致
        local dsToken = Payload.dsToken
        if not dsToken then
            response.Approved = false
            _MOE.Logger.LogError("[GameMode] dsToken is not vaild")
            return
        end
        local loginToken = Payload.loginToken
        if not loginToken then
            response.Approved = false
            _MOE.Logger.LogError("[GameMode] loginToken is not vaild")
            return
        end
        local clientId = request.ClientNetworkId
        response.Approved = dsToken == _MOE.GameApp:GetDsToken()
        if response.Approved then
            response.CreatePlayerObject = true
            response.Position = _MOE.Vector3.zero
            response.Rotation = _MOE.Quaternion.identity

            -- 成功
            self:AddSessionPlayer(clientId, loginToken)
        end
        _MOE.Logger.LogFormat("[GameMode] response.Approved: {0}, clientId({1:D})", tostring(response.Approved), clientId)
    end

    function GameMode:OnAwake()
        self.Transport = self.NetWorkMgr.gameObject:GetComponent(typeof(CS.Unity.Netcode.Transports.UTP.UnityTransport))
        self.DsGsNetModel = _MOE.GameApp:GetModel("DsGsNetModel")
        self.DsaNetModel = _MOE.GameApp:GetModel("DsaNetModel")
        self.DsSessionManager = _MOE.GameApp:GetModel("DsSessionManager")
    end

    function GameMode:GenerateScenesInBuild()
        local sceneManager = self.NetWorkMgr.SceneManager
        _MOE.NetCodeHelper.InitHelper(sceneManager)
        _MOE.NetCodeHelper.GenerateScenesInBuild2(sceneManager, MutiScenes)
    end

    function GameMode:OnStart()
        self:RegisterNetManagerServerEvents()
        self:GenerateScenesInBuild()
        -- 连接到GS上
        self.DsGsNetModel:ConnectGS()
        self.DsaNetModel:ConnectDSA()
    end

    function GameMode:OnGsConnectAbort()
        _MOE.Logger.LogError("[DS] NetManager:OnGsConnectAbort")
        _MOE.GameApp:QuitGame()
    end

    function GameMode:OnGsConnectResult(isOk)
        if not isOk or not self.Transport or not self.NetWorkMgr then
            _MOE.GameApp:QuitGame()
            return
        end
        local GsSession = _MOE.GameApp:GetGsDsSession()
        if not GsSession then
            _MOE.GameApp:QuitGame()
            return
        end
        local ip = GsSession:GetDsIp()
        local port = GsSession:GetDsPort()
        self.Transport:SetConnectionData(ip, port)
        if not self.NetWorkMgr:StartServer() then
            _MOE.Logger.LogError("[DS] NetManager:StartServer False")
            _MOE.GameApp:QuitGame()
            return
        end
        self.SceneManager = self.NetWorkMgr.SceneManager
        _MOE.Logger.Log("[DS] NetManager:StartServer True")
        self.DsaNetModel:SendDsReady()
    end

    function GameMode:LoadMainSceneAsync(sceneName)
        if not sceneName or string.len(sceneName) <= 0 then
            return false
        end
        if not self.SceneManager then
            return false
        end
        -- 创建场景加载节点
        local loader = _MOE.GameApp:GetSceneAsyncLoader()
        if not loader then
            return false
        end
        if not loader:LoadMainSceneABAsync(sceneName) then
            _MOE.Logger.LogErrorFormat("[GameMode] loader.LoadMainSceneABAsync Error: not vaild sceneName({0})", sceneName)
            return false
        end
        --
        return true
    end

else
    ------------------------- 只在Client跑这个逻辑 -------------------

    function GameMode:RegisterSystemEvents()
        local EventType = _MOE.LuaEvent_MonoEventType
        self.Binder:RegisterLuaEvent(EventType.Awake:GetHashCode(), self.OnAwake)
        self.Binder:RegisterLuaEvent(EventType.Destroyed:GetHashCode(), self.OnDestroy)

        _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.MultiScenePostLoad, self, self.OnMultiScenePostLoad)
        _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.MultiSceneExit, self, self.OnMultiSceneExit)
        _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.SinglePlayPostLoad, self, self.OnSinglePlayPostLoad)
    end

    function GameMode:OnClient_ClientStopped(b)
        _MOE.Logger.Log("[GameMode] OnConnectionEvent: " .. tostring(b))
        _MOE.DsNetworkHelper.NetworkManager_ClearAllEvents()
        if not b then
            _MOE.UIManager:OpenWindow(_MOE.WindowName.GM_DS)
        end
    end

    function GameMode:OnClient_ClientStarted()
        _MOE.DsNetworkHelper.NetworkManager_ClearAllEvents()
    end

    function GameMode:RegisterClientEvents()
        _MOE.DsNetworkHelper.NetworkManager_SetOnClientStopped(
                        function (b)
                            self:OnClient_ClientStopped(b)
                        end
                    )
        _MOE.DsNetworkHelper.NetworkManager_SetOnClientStarted(
            function ()
                self:OnClient_ClientStarted()
            end
        )
    end

    function GameMode:OnMultiScenePostLoad()
        self:SetConnectionApprovalData()
        if self.Transport then
            local dsIp, dsPort = _MOE.GameApp:GetMultiGameIpAndPort()
            if dsIp and dsPort then
                self.Transport:SetConnectionData(dsIp, dsPort)
                if self.NetWorkMgr:StartClient() then
                    _MOE.Logger.Log("[GameModel] StartClient: OK")
                    self:RegisterClientEvents()
                else
                    _MOE.Logger.LogError("[GameModel] StartClient: Failed")
                end
            end
        end
    end

    function GameMode:OnSinglePlayPostLoad()
        -- 单机版本开自己的Host，RPC自己发给自己
        if self.Transport then
            self.Transport:SetConnectionData("127.0.0.1", 0)
            if self.NetWorkMgr:StartHost() then
                _MOE.Logger.Log("[GameModel] StartClient: OK")
                self:RegisterClientEvents()
            else
                _MOE.Logger.LogError("[GameModel] StartClient: Failed")
            end
        end
    end

    function GameMode:OnMultiSceneExit()
        self:ClearConnectionApprovalData()
    end

    function GameMode:SetConnectionApprovalData()
        local model = _MOE.GameApp:GetMultiGame()
        if not model then
            return
        end
        local data = model:GetApprovalData()
        local str = _MOE.Json.encode(data)
        _MOE.Logger.LogFormat("[GameMode] SetConnectionApprovalData: {0}", str)
        self.NetWorkMgr.NetworkConfig.ConnectionData = str
    end

    function GameMode:ClearConnectionApprovalData()
        self.NetWorkMgr.NetworkConfig.ConnectionData = ""
    end

    function GameMode:OnAwake()
        _MOE.Logger.Log("[Client] GameMode Awake")
        self.Transport = self.NetWorkMgr.gameObject:GetComponent(typeof(CS.Unity.Netcode.Transports.UTP.UnityTransport))
    end
    -------------------------------- 外部调用 --------------------------------------
    
    function GameMode:OnEnterMap()
    end

    function GameMode:OnExitMap()
    end
end

return GameMode