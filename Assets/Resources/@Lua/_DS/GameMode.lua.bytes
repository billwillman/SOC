local CSharpEventContainer = require("_Common.CSharpEventContainer")
local GameMode = _MOE.class("GameMode", CSharpEventContainer)

function GameMode:Ctor(netWorkMgr, binder)
    self.NetWorkMgr = netWorkMgr
    self.Binder = binder
    self:RegisterSystemEvents()

    -- 设置GameMode数据
    _MOE.GameApp.GameMode = self
end

function GameMode:OnDestroy()
    if self.Transport and self.Transport.Shutdown then
        self.Transport:Shutdown()
    end
    _MOE.EventManager:UnRegisterEvents(self)
    self:UnRegsterAllCsharpEvents()
    self.Transport = nil
end

if _MOE.IsDS then
    ----------------------------- 只有DS上才跑这个逻辑

    function GameMode:RegisterSystemEvents()
        local EventType = _MOE.LuaEvent_MonoEventType
        self.Binder:RegisterLuaEvent(EventType.Awake:GetHashCode(), self.OnAwake)
        self.Binder:RegisterLuaEvent(EventType.Destroyed:GetHashCode(), self.OnDestroy)
        self.Binder:RegisterLuaEvent(EventType.Start:GetHashCode(), self.OnStart)
        --_MOE.EventManager:RegisterEvent(_MOE.CommonEvents.GsConnectResult, self, self.OnGsConnectResult)
        -- _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.GsConnectAbort, self, self.OnGsConnectAbort)
        _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.DsaConnectResult, self, self.OnGsConnectResult)
        _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.DsaConnectAbort, self, self.OnGsConnectAbort)
    end

    function GameMode:RegisterNetManagerServerEvents()
        self:RegsterCSharpEvent(self.NetWorkMgr, "ConnectionApprovalCallback", self.OnServer_ConnectionApprovalCallback)
    end

    function GameMode:OnServer_ConnectionApprovalCallback(request, response)
        _MOE.Logger.Log("[GameMode] ConnectionApprovalCallback")
    end

    function GameMode:OnAwake()
        self.Transport = self.NetWorkMgr.gameObject:GetComponent(typeof(CS.Unity.Netcode.Transports.UTP.UnityTransport))
        self.DsGsNetModel = _MOE.GameApp:GetModel("DsGsNetModel")
        self.DsaNetModel = _MOE.GameApp:GetModel("DsaNetModel")
        self.DsSessionManager = _MOE.GameApp:GetModel("DsSessionManager")
    end

    function GameMode:OnStart()
        self:RegisterNetManagerServerEvents()
        -- 连接到GS上
        self.DsGsNetModel:ConnectGS()
        self.DsaNetModel:ConnectDSA()
    end

    function GameMode:OnGsConnectAbort()
        _MOE.Logger.LogError("[DS] NetManager:OnGsConnectAbort")
        _MOE.GameApp:QuitGame()
    end

    function GameMode:OnGsConnectResult(isOk)
        if not isOk or not self.Transport or not self.NetWorkMgr then
            _MOE.GameApp:QuitGame()
            return
        end
        local GsSession = _MOE.GameApp:GetGsDsSession()
        if not GsSession then
            _MOE.GameApp:QuitGame()
            return
        end
        local ip = GsSession:GetDsIp()
        local port = GsSession:GetDsPort()
        self.Transport:SetConnectionData(ip, port)
        if not self.NetWorkMgr:StartServer() then
            _MOE.Logger.LogError("[DS] NetManager:StartServer False")
            _MOE.GameApp:QuitGame()
            return
        end
        _MOE.Logger.Log("[DS] NetManager:StartServer True")
        self.DsaNetModel:SendDsReady()
    end

else
    ------------------------- 只在Client跑这个逻辑 -------------------

    function GameMode:RegisterSystemEvents()
        local EventType = _MOE.LuaEvent_MonoEventType
        self.Binder:RegisterLuaEvent(EventType.Awake:GetHashCode(), self.OnAwake)
        self.Binder:RegisterLuaEvent(EventType.Destroyed:GetHashCode(), self.OnDestroy)
        self.Binder:RegisterLuaEvent(EventType.Start:GetHashCode(), self.OnStart)

        _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.MultiScenePostLoad, self, self.OnScenePostLoad)
        _MOE.EventManager:RegisterEvent(_MOE.CommonEvents.MultiSceneExit, self, self.OnSceneExit)
    end

    function GameMode:OnScenePostLoad()
        self:SetConnectionApprovalData()
        if self.Transport then
            local dsIp, dsPort = _MOE.GameApp:GetMultiGameIpAndPort()
            if dsIp and dsPort then
                self.Transport:SetConnectionData(dsIp, dsPort)
                if self.NetWorkMgr:StartClient() then
                    _MOE.Logger.Log("[GameModel] StartClient: OK")
                else
                    _MOE.Logger.LogError("[GameModel] StartClient: Failed")
                end
            end
        end
    end

    function GameMode:OnSceneExit()
        self:ClearConnectionApprovalData()
    end

    function GameMode:SetConnectionApprovalData()
        local model = _MOE.GameApp:GetMultiGame()
        if not model then
            return
        end
        local data = model:GetApprovalData()
        local str = _MOE.Json.encode(data)
        _MOE.Logger.LogFormat("[GameMode] SetConnectionApprovalData: {0}", str)
        self.NetWorkMgr.NetworkConfig.ConnectionData = str
    end

    function GameMode:ClearConnectionApprovalData()
        self.NetWorkMgr.NetworkConfig.ConnectionData = ""
    end

    function GameMode:OnAwake()
        _MOE.Logger.Log("[Client] GameMode Awake")
        self.Transport = self.NetWorkMgr.gameObject:GetComponent(typeof(CS.Unity.Netcode.Transports.UTP.UnityTransport))
    end

    function GameMode:OnStart()
        -- self:RegsterCSharpEvent(self.NetWorkMgr, "OnClientStarted", self.OnClient_ClientStarted)
    end

    function GameMode:OnClient_ClientStarted()
    end
    -------------------------------- 外部调用 --------------------------------------
    
    function GameMode:OnEnterMap()
    end

    function GameMode:OnExitMap()
    end
end

return GameMode