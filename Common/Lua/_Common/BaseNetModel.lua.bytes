local _M = _MOE.class("BaseNetModel", _MOE.BaseModel)
local MsgIds = require("_NetMsg.MsgId")

local function StopHeartTimer(self)
    if self.m_HeartTimer then
        _MOE.TimerManager:RemoveTimer(self.m_HeartTimer)
        self.m_HeartTimer = nil
    end
end

local function StartHeartTimer(self)
    StopHeartTimer(self)
    self.m_HeartTimer = _MOE.TimerManager:AddLoopTimer(0.3, self, self._OnHeartTimer)
end

function _M:OnInit()
    self:RegsterCSharpEvent(_MOE.NetManager, "OnConnectResult", self._OnGSConnectResult)
    self:RegsterCSharpEvent(_MOE.NetManager, "OnSocketAbort", self._OnGSSocketAbort)
    self:RegsterCSharpEvent(_MOE.NetManager, "OnMoonPacketRead", self._OnMoonPacketRead)
    xpcall(self.NetModel_OnInit, _G.ErrorHandler, self)
end

function _M:_OnGSConnectResult(isOk)
    if not isOk then
        _MOE.Logger.LogErrorFormat("[GS] Connect Result: {0}", isOk)
    else
        _MOE.Logger.LogFormat("[GS] Connect Result: {0}", isOk)
    end
    _MOE.EventManager:DispatchEvent(_MOE.CommonEvents.GsConnectResult, isOk)
    if isOk then
        -- 心跳包
        StartHeartTimer(self)
    else
        StopHeartTimer(self)
    end
    xpcall(self.NetModel_OnConnectResult, _G.ErrorHandler, self, isOk)
end

function _M:_OnGSSocketAbort()
    _MOE.Logger.LogError("[GS] Connect Abort")
    _MOE.EventManager:DispatchEvent(_MOE.CommonEvents.GsConnectAbort)
    StopHeartTimer(self)
    xpcall(self.NetModel_OnSocketAbort, _G.ErrorHandler, self)
end

function _M:IsGsConnected()
    local state = _MOE.NetManager.ClietnState
    local ret = state == _MOE.NetState.eClient_STATE_CONNECTED
    return ret
end

function _M:OnUnInit()
    xpcall(self.NetModel_OnUnInit, _G.ErrorHandler, self)
    _MOE.NetManager:Disconnect()
    _MOE.NetManager.OnConnectResult = nil
    _MOE.NetManager.OnSocketAbort = nil
    _MOE.NetManager.OnMoonPacketRead = nil
    StopHeartTimer(self)
end

function _M:_OnHeartTimer()
    -- 心跳包
    if self:IsGsConnected() then
        self:SendMsg(MsgIds.CM_Heart)
    end
end

function _M:PrepareStartConnect()
    StopHeartTimer(self)
end

function _M:SendMsg(msgId, data)
    _MOE.Logger.LogWarningFormat("[GS] NetMsgId: {0:D}", msgId)
    data = data or {}
    data.msgId = msgId
    local msg = _MOE.Json.encode(data)
    _MOE.NetManager:SendMoonStr(msg)
end

_M.ReceiveMsgProcess = {
    [MsgIds.SM_Heart] = function (msg)
    end
}

function _M:_OnMoonPacketRead(packet)
    if packet:hasData() then
        local json = packet:dataToString()
        local msg = _MOE.Json.decode(json)
        if msg and msg.msgId then
            local OnProcess = _M.ReceiveMsgProcess[msg.msgId]
            if OnProcess then
                OnProcess(msg)
            end
        else
            _MOE.Logger.LogError("[GS] OnMoonPacketRead not vaild data")
        end
    else
        _MOE.Logger.LogError("[GS] OnMoonPacketRead not data")
    end
end

----------------------------------------------------------------- 虚方法 ---------------------------------------------------------

function _M:NetModel_OnInit()
end

function _M:NetModel_OnUnInit()
end

function _M:NetModel_OnConnectResult(isOk)
end

function _M:NetModel_OnSocketAbort()
end

------------------------------------------------------------------------------------------------------------------------------------

return _M